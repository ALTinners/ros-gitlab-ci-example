stages:
  - unit_test
  - integration_test
  - acceptance_test
  - cleanup

variables:
  ALLOW_FAILING_TESTS: 0    # A flag to allow continuation in the case of a failing test stage. Set to 1 (not "1") in the Pipeline Variables to permit passing tests even in fail cases

before_script:
  - source source_ros.bash
  - source $ROS_SOURCE_BASH_FILE  

unit_testing:
  stage: unit_test
  variables:
    HTML_FILE_ALL: "${CI_COMMIT_REF_NAME}/unit_tests_all.html"
    HTML_FILE_FAILED: "${CI_COMMIT_REF_NAME}/unit_tests_failed.html"
  script: 
    - catkin_make run_tests --cmake-args -DBUILD_UNIT_TESTS=ON -DBUILD_INTEGRATION_TESTS=OFF      # catkin_make run_tests will return 0 even if tests fail
    - mkdir ${CI_COMMIT_REF_NAME}
    - xsltproc -o ${HTML_FILE_ALL} gtest_result_all.xsl build/test_results/primary/gtest-primary_controller_unit_tests.xml # We parse that failed output into a page
    - xsltproc -o ${HTML_FILE_FAILED} gtest_result_failed.xsl build/test_results/primary/gtest-primary_controller_unit_tests.xml 
    - ls ${CI_COMMIT_REF_NAME}
    - ./check_catkin_results.bash                               # And then check our results
  # artifacts:
  #   when: always
  #   paths:
  #   - ${HTML_FILE_ALL}
  #   - ${HTML_FILE_FAILED}
  #   expire_in: 1 week

integration_testing:
  stage: integration_test
  script:
    - catkin_make run_tests --cmake-args -DBUILD_UNIT_TESTS=OFF -DBUILD_INTEGRATION_TESTS=ON
    - xsltproc -o integration_tests_all.html gtest_result_all.xsl build/test_results/primary/rosunit-primary_controller_integration_tests.xml
    - xsltproc -o integration_tests_failed.html gtest_result_failed.xsl build/test_results/primary/rosunit-primary_controller_integration_tests.xml
    - ./check_catkin_results.bash
  artifacts:
    when: always
    paths:
    - integration_tests_all.html
    - integration_tests_failed.html
    expire_in: 1 week    

acceptance_testing:
  stage: acceptance_test
  script: 
    - source ./run_newman.bash        # Runs the newman tests, but always returns 0 (newman will return 1 if the newman tests fail)
    - xsltproc -o acceptance_tests_all.html newman_result_all.xsl acceptance_tests.xml   # We now parse the newman results into a webpage
    - xsltproc -o acceptance_tests_failed.html newman_result_failed.xsl acceptance_tests.xml  
    - ./check_newman_results.bash                   # And fail properly once the page is generated
  artifacts:
    when: always
    paths:
    - acceptance_tests_all.html
    - acceptance_tests_failed.html
    expire_in: 1 week    

pages:
  stage: cleanup
  when: always
  script:
    - ls ${CI_COMMIT_REF_NAME}
    - cp ${CI_COMMIT_REF_NAME}/* public
  artifacts:
    when: always
    paths:
      - public
