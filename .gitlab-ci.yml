stages:
  - unit_test
  - integration_test
  - acceptance_test
  - docs
  - cleanup

# Caches nodejs, build and devel folders across the stages
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - build/
    - devel/
    - thirdparty/

variables:
  # A flag to allow continuation in the case of a failing test stage. 
  # Set to 1 (not "1") in the Pipeline Variables to permit passing tests even in fail cases
  ALLOW_FAILING_TESTS: 0   
  ARTIFACTS_DIR: "artifacts"
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - source ./bash/source_ros.bash
  - source $ROS_SOURCE_BASH_FILE  
  - npm install --progress=false

unit_testing:
  stage: unit_test
  variables:
    HTML_FILE_ALL: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/unit_tests_all.html"
    HTML_FILE_FAILED: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/unit_tests_failed.html"
  script: 
    - catkin_make run_tests --cmake-args -DBUILD_UNIT_TESTS=ON -DBUILD_INTEGRATION_TESTS=OFF      # catkin_make run_tests will return 0 even if tests fail
    - mkdir -p ${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}
    - xsltproc -o ${HTML_FILE_ALL} xsl/gtest_result_all.xsl build/test_results/primary/gtest-primary_controller_unit_tests.xml # We parse that failed output into a page
    - xsltproc -o ${HTML_FILE_FAILED} xsl/gtest_result_failed.xsl build/test_results/primary/gtest-primary_controller_unit_tests.xml 
    - ./bash/check_catkin_results.bash                               # And then check our results
  artifacts:
    when: always
    paths:
    - ${HTML_FILE_ALL}
    - ${HTML_FILE_FAILED}
    expire_in: 1 week

integration_testing:
  stage: integration_test
  variables:
    HTML_FILE_ALL: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/integration_tests_all.html"
    HTML_FILE_FAILED: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/integration_tests_failed.html"
  script:
    - catkin_make run_tests --cmake-args -DBUILD_UNIT_TESTS=OFF -DBUILD_INTEGRATION_TESTS=ON
    - xsltproc -o ${HTML_FILE_ALL} xsl/gtest_result_all.xsl build/test_results/primary/rosunit-primary_controller_integration_tests.xml
    - xsltproc -o ${HTML_FILE_FAILED} xsl/gtest_result_failed.xsl build/test_results/primary/rosunit-primary_controller_integration_tests.xml
    - ./bash/check_catkin_results.bash
  artifacts:
    when: always
    paths:
    - ${HTML_FILE_ALL}
    - ${HTML_FILE_FAILED}
    expire_in: 1 week    

acceptance_testing:
  stage: acceptance_test
  variables:
    HTML_FILE_ALL: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/acceptance_tests_all.html"
    HTML_FILE_FAILED: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/acceptance_tests_failed.html"  
  script: 
    - source ./bash/run_newman.bash        # Runs the newman tests, but always returns 0 (newman will return 1 if the newman tests fail)
    - xsltproc -o ${HTML_FILE_ALL} xsl/newman_result_all.xsl acceptance_tests.xml   # We now parse the newman results into a webpage
    - xsltproc -o ${HTML_FILE_FAILED} xsl/newman_result_failed.xsl acceptance_tests.xml  
    - ./bash/check_newman_results.bash                   # And fail properly once the page is generated
  artifacts:
    when: always
    paths:
    - ${HTML_FILE_ALL}
    - ${HTML_FILE_FAILED}
    expire_in: 1 week    

doxygen:
  stage: docs
  when: always
  variables:
    DOCS_DIR: "${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME}/docs"
  script: 
    - doxygen Doxyfile
    - mkdir -p ${DOCS_DIR}
    - cp -r docs ${DOCS_DIR}
  artifacts:
    when: always
    paths:
    - ${DOCS_DIR}
    expire_in: 1 week    

pages:
  stage: cleanup
  when: always
  script:
    - ls -l artifacts
    - echo ${ARTIFACTS_DIR}
    - cp -r ${ARTIFACTS_DIR}/${CI_COMMIT_REF_NAME} public
    - node js/create_git_xml.js
    - xsltproc -o public/index.html xsl/index_page.xsl git_xml.xml
  artifacts:
    when: always
    paths:
      - public
